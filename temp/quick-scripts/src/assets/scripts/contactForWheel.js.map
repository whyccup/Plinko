{"version":3,"sources":["assets/scripts/contactForWheel.js"],"names":["cc","Class","Component","properties","_needNotify","audioPeng","AudioClip","_audioPengId","audioSoundSuccess","playPeng","console","log","audioEngine","playMusic","isMusicPlaying","resumeMusic","playAudioSoundSuccess","playEffect","onBeginContact","contact","selfCollider","otherCollider","onEndContact","name","body","linearDamping","tag","restitution","Math","random","toFixed"],"mappings":";;;;;;AAAAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,WAAW,EAAE,IADL;AAERC,IAAAA,SAAS,EAAEL,EAAE,CAACM,SAFN;AAGRC,IAAAA,YAAY,EAAE,IAHN;AAIRC,IAAAA,iBAAiB,EAAER,EAAE,CAACM;AAJd,GAHP;AAULG,EAAAA,QAVK,sBAUM;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAI,CAAC,KAAKN,SAAV,EAAqB;AACrBK,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,QAAI,CAAC,KAAKJ,YAAV,EAAwB;AACpBG,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAKJ,YAAL,GAAoBP,EAAE,CAACY,WAAH,CAAeC,SAAf,CAAyB,KAAKR,SAA9B,EAAyC,KAAzC,EAAgD,CAAhD,CAApB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,KAJD,MAIO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,UAAI,CAACX,EAAE,CAACY,WAAH,CAAeE,cAAf,EAAL,EAAsC;AAClCJ,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAX,QAAAA,EAAE,CAACY,WAAH,CAAeG,WAAf;AACH;AACJ;AACJ,GA3BI;AA6BLC,EAAAA,qBA7BK,mCA6BmB;AACpBhB,IAAAA,EAAE,CAACY,WAAH,CAAeK,UAAf,CAA0B,KAAKT,iBAA/B,EAAkD,KAAlD;AACH,GA/BI;AAiCLU,EAAAA,cAjCK,0BAiCWC,OAjCX,EAiCoBC,YAjCpB,EAiCkCC,aAjClC,EAiCiD;AAClD,SAAKZ,QAAL;AACH,GAnCI;AAqCLa,EAAAA,YArCK,wBAqCSH,OArCT,EAqCkBC,YArClB,EAqCgCC,aArChC,EAqC+C;AAChD,QAAIA,aAAa,CAACE,IAAd,KAAuB,4BAA3B,EAAyD;AACrD;AACAH,MAAAA,YAAY,CAACI,IAAb,CAAkBC,aAAlB,GAAkC,CAAlC,CAFqD,CAGrD;;AACA,UAAI,KAAKrB,WAAT,EAAsB;AAClB,aAAKY,qBAAL;AAEAN,QAAAA,OAAO,CAACC,GAAR,CAAYU,aAAa,CAACK,GAA1B;AAEA,aAAKrB,SAAL,GAAiB,IAAjB;AACA,aAAKD,WAAL,GAAmB,KAAnB,CANkB,CAQlB;AACA;AACH;AACJ,KAfD,MAeO;AACHgB,MAAAA,YAAY,CAACO,WAAb,GAA2BC,IAAI,CAACC,MAAL,GAAcC,OAAd,CAAsB,CAAtB,CAA3B;AACH;AACJ;AAxDI,CAAT","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        _needNotify: true,\n        audioPeng: cc.AudioClip,\n        _audioPengId: null,\n        audioSoundSuccess: cc.AudioClip,\n    },\n\n    playPeng() {\n        console.log('有音频吗？')\n        if (!this.audioPeng) return\n        console.log('有音频')\n        console.log('已经load过音频了吗')\n        if (!this._audioPengId) {\n            console.log('没有load过音频')\n            this._audioPengId = cc.audioEngine.playMusic(this.audioPeng, false, 1);\n            console.log('load音频完成')\n        } else {\n            console.log('已经load过音频')\n            console.log('正在播放音频吗')\n            if (!cc.audioEngine.isMusicPlaying()) {\n                console.log('未播放音频')\n                cc.audioEngine.resumeMusic();\n            } \n        }\n    },\n\n    playAudioSoundSuccess() {\n        cc.audioEngine.playEffect(this.audioSoundSuccess, false);\n    },\n    \n    onBeginContact (contact, selfCollider, otherCollider) {\n        this.playPeng()\n    },\n    \n    onEndContact (contact, selfCollider, otherCollider) {\n        if (otherCollider.name === 'bottom<PhysicsBoxCollider>') {\n            // 让刚体缓慢停止运动\n            selfCollider.body.linearDamping = 1\n            // tag: Number, 可能的值 = [0,1,2,3,4], 对应底部不同的框\n            if (this._needNotify) {\n                this.playAudioSoundSuccess()\n\n                console.log(otherCollider.tag)\n\n                this.audioPeng = null\n                this._needNotify = false\n\n                // // 测试\n                // cc.director.loadScene('Game');\n            }\n        } else {\n            selfCollider.restitution = Math.random().toFixed(2)\n        }\n    }\n});\n"]}